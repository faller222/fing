package uy.edu.fing.ae.obligatorio.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import uy.edu.fing.ae.obligatorio.controlador.AEControlador;
import uy.edu.fing.ae.obligatorio.controlador.GraspControlador;
import uy.edu.fing.ae.obligatorio.controlador.ProblemaControlador;
import uy.edu.fing.ae.obligatorio.controlador.PropiedadesControlador;
import uy.edu.fing.ae.obligatorio.modelo.Individuo;
import uy.edu.fing.ae.obligatorio.modelo.Interes;
import uy.edu.fing.ae.obligatorio.util.Logger;
import uy.edu.fing.ae.obligatorio.util.PropiedadesEnum;

public class Principal extends javax.swing.JFrame {

    private String rutaDatos = PropiedadesEnum.WORKSPACE.getValorDefecto();
    private String rutaProp = PropiedadesEnum.PROPERTIES.getValorDefecto();

    private Individuo individuo;

    private void mostrarMensaje(String mensaje, String titulo, int type) {
        JOptionPane.showMessageDialog(this,
                mensaje,
                titulo,
                type);
    }

    private void mostrarMensajeInfo(String mensaje, String titulo) {
        mostrarMensaje(mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }

    private void mostrarMensajeError(String mensaje) {
        mostrarMensaje(mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void mostrarMensajeError(Exception e) {
        String stack = "";
        int i = 20;
        for (StackTraceElement element : e.getStackTrace()) {
            stack += element.toString() + "\n";
            if (i-- == 0) {
                break;
            }
        }

        mostrarMensaje(stack, "Error: " + e.getClass().getSimpleName(), JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        try {
            super.setIconImage(ImageIO.read(new File("src/icon.png")));
        } catch (IOException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        mapa = new javax.swing.JPanel();
        barraEstado = new javax.swing.JPanel();
        lblEstado = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuPintar = new javax.swing.JMenu();
        menuCargarMapa = new javax.swing.JMenuItem();
        menuCargarProp = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuGrasp = new javax.swing.JMenuItem();
        menuGenetico = new javax.swing.JMenuItem();
        menuLimpiar = new javax.swing.JMenuItem();
        menuPausar = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("File");
        jMenuBar3.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("jMenu6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AE - Galeria de Arte");
        setFocusableWindowState(false);
        setMinimumSize(new java.awt.Dimension(700, 700));

        mapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapaLayout = new javax.swing.GroupLayout(mapa);
        mapa.setLayout(mapaLayout);
        mapaLayout.setHorizontalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 788, Short.MAX_VALUE)
        );
        mapaLayout.setVerticalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 536, Short.MAX_VALUE)
        );

        lblEstado.setText(".");

        javax.swing.GroupLayout barraEstadoLayout = new javax.swing.GroupLayout(barraEstado);
        barraEstado.setLayout(barraEstadoLayout);
        barraEstadoLayout.setHorizontalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEstado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barraEstadoLayout.setVerticalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraEstadoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblEstado))
        );

        menuPintar.setText("Datos");

        menuCargarMapa.setText("Cargar mapa");
        menuCargarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarMapaActionPerformed(evt);
            }
        });
        menuPintar.add(menuCargarMapa);

        menuCargarProp.setText("Cargar configuración");
        menuCargarProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarPropActionPerformed(evt);
            }
        });
        menuPintar.add(menuCargarProp);

        menuGuardar.setText("Guardar solución");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuPintar.add(menuGuardar);

        jMenuBar1.add(menuPintar);

        jMenu1.setText("Algoritmo");

        menuGrasp.setText("Grasp");
        menuGrasp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGraspActionPerformed(evt);
            }
        });
        jMenu1.add(menuGrasp);

        menuGenetico.setText("Genetico");
        menuGenetico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGeneticoActionPerformed(evt);
            }
        });
        jMenu1.add(menuGenetico);

        menuLimpiar.setText("LimpiarMemoria");
        menuLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLimpiarActionPerformed(evt);
            }
        });
        jMenu1.add(menuLimpiar);

        menuPausar.setText("Pausar");
        menuPausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPausarActionPerformed(evt);
            }
        });
        jMenu1.add(menuPausar);

        jMenuBar1.add(jMenu1);

        menuHelp.setText("Ayuda");

        menuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuAbout.setText("Acerca de...");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCargarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarMapaActionPerformed
        final JFileChooser fc = new JFileChooser();

        fc.setCurrentDirectory(new File(rutaDatos));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            rutaDatos = file.getParentFile().getAbsolutePath();

            try (InputStream fis = new FileInputStream(file)) {

                BufferedImage mapaBI = ImageIO.read(fis);

                ProblemaControlador.getInstance().cargar(mapaBI);
                AEControlador.getInstance().init();

                reDibujar();
            } catch (Exception ex) {
                mostrarMensajeError(ex);
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuCargarMapaActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        //easter egg, llamo a este metodo con un breakpoint en el para ver el estado del controller
        ProblemaControlador.getInstance().check();
        //TODO poner titulo del proyecto
        mostrarMensajeInfo("Proyecto final 2017 - Algoritmos Evolutivos.\nGaleria de Arte"
                + "\nGerman Faller\nSantiago Ingold", "Acerca de...");

    }//GEN-LAST:event_menuAboutActionPerformed

    private void mapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapaMouseClicked
        reDibujar();
    }//GEN-LAST:event_mapaMouseClicked

    private void menuCargarPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarPropActionPerformed
        final JFileChooser fc = new JFileChooser();

        if (rutaProp == null) {
            rutaProp = PropiedadesEnum.PROPERTIES.getValorDefecto();
        }
        fc.setCurrentDirectory(new File(rutaProp));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {

                File propFile = fc.getSelectedFile();
                rutaProp = propFile.getAbsolutePath();
                PropiedadesControlador.load(new File(rutaProp));

            } catch (Exception ex) {
                mostrarMensajeError(ex);
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuCargarPropActionPerformed

    private void menuGeneticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGeneticoActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            (new Thread(() -> {
                try {
                    individuo = AEControlador.getInstance().run();
                    Logger.info("Cubrimiento encontrado " + individuo.getFitness());
                    reDibujar();
                    String tiempo = AEControlador.getInstance().getTime();
                    int gen = AEControlador.getInstance().getGeneracion();

                    lblEstado.setText("Generacion: " + gen + " | Fitness Individuo: " + individuo.getFitness() + " | Tiempo: " + tiempo);

                } catch (Exception e) {
                    mostrarMensajeError(e);
                }

            })).start();

            //Consulta Consante
            (new Thread(() -> {
                try {
                    Thread.sleep(5000);
                    int gen = 0;
                    Integer fitness = 0;
                    while (AEControlador.getInstance().isRunning()) {
                        individuo = AEControlador.getInstance().getBest();

                        while (individuo == null) {
                            Thread.sleep(200);
                            individuo = AEControlador.getInstance().getBest();
                        }

                        String tiempo = AEControlador.getInstance().getTime();
                        gen = AEControlador.getInstance().getGeneracion();

                        Boolean debug = PropiedadesControlador.getBoolProperty(PropiedadesEnum.DEBUG);
                        if (debug) {
                            if (individuo.getFitness() > fitness) {
                                fitness = individuo.getFitness();
                                reDibujar();
                            }
                        }
                        lblEstado.setText("Generacion: " + gen + " | Fitness Individuo: " + individuo.getFitness() + " | Tiempo: " + tiempo);
                        Thread.sleep(500);

                    }
                } catch (InterruptedException ex) {
                    Logger.error(null, ex);
                }
            })).start();

        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }
    }//GEN-LAST:event_menuGeneticoActionPerformed

    private void menuPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPausarActionPerformed
        AEControlador.getInstance().forceStop();
        GraspControlador.getInstance().forceStop();
    }//GEN-LAST:event_menuPausarActionPerformed

    private void menuLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLimpiarActionPerformed
        AEControlador.getInstance().init();
        GraspControlador.getInstance().init();
    }//GEN-LAST:event_menuLimpiarActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        if (individuo != null) {
            Path path = Paths.get("Cubrimiento.txt");
            try (BufferedWriter writer = Files.newBufferedWriter(path)) {

                int[][] cubrimiento = individuo.getCubrimiento();

                for (int x = 0; x < cubrimiento[0].length; x++) {
                    for (int y = 0; y < cubrimiento.length; y++) {
                        if (cubrimiento[x][y] > 0) {
                            writer.write(1 + "\t");
                        } else {
                            writer.write(0 + "\t");
                        }
                    }
                    writer.write("\n");
                }
            } catch (IOException ex) {
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuGraspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGraspActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            (new Thread(() -> {
                try {
                    individuo = GraspControlador.getInstance().run();
                    Logger.info("Cubrimiento encontrado " + individuo.getFitness());
                    reDibujar();
                    String tiempo = GraspControlador.getInstance().getTime();
                    int gen = GraspControlador.getInstance().getGeneracion();

                    lblEstado.setText("Generacion: " + gen + " | Fitness Individuo: " + individuo.getFitness() + " | Tiempo: " + tiempo);

                } catch (Exception e) {
                    mostrarMensajeError(e);
                }

            })).start();

            //Consulta Consante
            (new Thread(() -> {
                try {
                    Thread.sleep(5000);
                    int gen = 0;
                    Integer fitness = 0;
                    while (GraspControlador.getInstance().isRunning()) {
                        individuo = GraspControlador.getInstance().getBest();

                        while (individuo == null) {
                            Thread.sleep(200);
                            individuo = GraspControlador.getInstance().getBest();
                        }

                        String tiempo = GraspControlador.getInstance().getTime();
                        gen = GraspControlador.getInstance().getGeneracion();

                        lblEstado.setText("Generacion: " + gen + " | Fitness Individuo: " + individuo.getFitness() + " | Tiempo: " + tiempo);
                        Thread.sleep(500);

                    }
                } catch (InterruptedException ex) {
                    Logger.error(null, ex);
                }
            })).start();

        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }
    }//GEN-LAST:event_menuGraspActionPerformed

    private void reDibujar() {
        Boolean debug = PropiedadesControlador.getBoolProperty(PropiedadesEnum.DEBUG);

        Graphics g = mapa.getGraphics();
        ProblemaControlador controlador = ProblemaControlador.getInstance();

        int panelSizeX = ((Double) mapa.getSize().getWidth()).intValue();
        int panelSizeY = ((Double) mapa.getSize().getHeight()).intValue();

        double proporcionX = ((double) mapa.getSize().getWidth()) / controlador.getWidth();
        double proporcionY = ((double) mapa.getSize().getHeight()) / controlador.getHeight();

        int initX;
        boolean black, white, red;

        //###########################################################################################
        //Dibujo el mapa
        Interes[][] sala = controlador.getSala();
        for (int row = 0; row < panelSizeY; row++) {

            black = true;
            white = false;
            red = false;
            initX = 0;

            for (int col = 0; col < panelSizeX; col++) {
                int tmpX = ((Double) (col / proporcionX)).intValue();
                int tmpY = ((Double) (row / proporcionY)).intValue();
                if (tmpY < controlador.getHeight() && tmpX < controlador.getWidth()) {
                    switch (sala[tmpY][tmpX]) {
                        case NUL0:
                            if (!black) {
                                black = true;
                                white = false;
                                red = false;

                                g.drawLine(initX, row, col - 1, row);
                                g.setColor(Color.BLACK);

                                initX = col;
                            }
                            break;
                        case MAYOR:
                            if (!red) {
                                black = false;
                                white = false;
                                red = true;

                                g.drawLine(initX, row, col - 1, row);
                                g.setColor(Color.RED);

                                initX = col;
                            }
                            break;
                        case NORMAL:
                            if (!white) {
                                black = false;
                                white = true;
                                red = false;

                                g.drawLine(initX, row, col - 1, row);
                                g.setColor(Color.WHITE);

                                initX = col;
                            }
                            break;
                    }
                }
            }

            g.drawLine(initX, row, panelSizeX - 1, row);
        }
        //###########################################################################################

        //###########################################################################################
        lblEstado.setText("");
        individuo = AEControlador.getInstance().getBest();
        if (individuo != null) {

            g.setColor(new Color(192, 192, 192));
            //Dibujo las Camaras
            int[][] cubrimiento = individuo.getCubrimiento();
            for (int row = 0; row < panelSizeY; row++) {
                for (int col = 0; col < panelSizeX; col++) {
                    int tmpX = ((Double) (col / proporcionX)).intValue();
                    int tmpY = ((Double) (row / proporcionY)).intValue();
                    if (tmpY < controlador.getHeight() && tmpX < controlador.getWidth()) {
                        int val = cubrimiento[tmpY][tmpX];
                        if (val > 0) {
                            val = 200 - val * 10;
                            g.setColor(new Color(val, val, val));
                            g.drawLine(col, row, col, row);
                        }
                    }
                }

            }

            String tiempo = AEControlador.getInstance().getTime();
            int gen = AEControlador.getInstance().getGeneracion();
            lblEstado.setText("Generacion: " + gen + " | Fitness  Individuo: " + individuo.getFitness() + " | Tiempo: " + tiempo);
        }
        mapa.paintComponents(g);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barraEstado;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JPanel mapa;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuCargarMapa;
    private javax.swing.JMenuItem menuCargarProp;
    private javax.swing.JMenuItem menuGenetico;
    private javax.swing.JMenuItem menuGrasp;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuLimpiar;
    private javax.swing.JMenuItem menuPausar;
    private javax.swing.JMenu menuPintar;
    // End of variables declaration//GEN-END:variables
}
