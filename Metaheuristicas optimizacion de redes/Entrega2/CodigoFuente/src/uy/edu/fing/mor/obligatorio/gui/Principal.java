package uy.edu.fing.mor.obligatorio.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.stream.Stream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import uy.edu.fing.mor.obligatorio.controlador.AEControlador;
import uy.edu.fing.mor.obligatorio.controlador.CotasControlador;
import uy.edu.fing.mor.obligatorio.controlador.ProblemaControlador;
import uy.edu.fing.mor.obligatorio.controlador.PropiedadesControlador;
import uy.edu.fing.mor.obligatorio.genetic.Parte1;
import uy.edu.fing.mor.obligatorio.genetic.Parte2;
import uy.edu.fing.mor.obligatorio.modelo.Arista;
import uy.edu.fing.mor.obligatorio.modelo.Individuo;
import uy.edu.fing.mor.obligatorio.modelo.Nodo;
import uy.edu.fing.mor.obligatorio.util.Logger;
import uy.edu.fing.mor.obligatorio.util.PropiedadesEnum;

public class Principal extends javax.swing.JFrame {

    private String rutaDatos = PropiedadesEnum.WORKSPACE.getValorDefecto();
    private String rutaProp = PropiedadesEnum.PROPERTIES.getValorDefecto();
    private List<Arista> individuo = null;

    private void mostrarMensaje(String mensaje, String titulo, int type) {
        JOptionPane.showMessageDialog(this,
                mensaje,
                titulo,
                type);
    }

    private void mostrarMensajeInfo(String mensaje, String titulo) {
        mostrarMensaje(mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }

    private void mostrarMensajeError(String mensaje) {
        mostrarMensaje(mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void mostrarMensajeError(Exception e) {
        String stack = "";
        int i = 20;
        for (StackTraceElement element : e.getStackTrace()) {
            stack += element.toString() + "\n";
            if (i-- == 0) {
                break;
            }
        }

        mostrarMensaje(stack, "Error: " + e.getClass().getSimpleName(), JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        try {
            super.setIconImage(ImageIO.read(new File("src/icon.png")));
        } catch (IOException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        mapa = new javax.swing.JPanel();
        barraEstado = new javax.swing.JPanel();
        lblEstado = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuPintar = new javax.swing.JMenu();
        menuCargarNodos = new javax.swing.JMenuItem();
        menuCargarAristas = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuCargarProp = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuParte1 = new javax.swing.JMenuItem();
        menuParte2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuGenetico = new javax.swing.JMenuItem();
        menuLimpiar = new javax.swing.JMenuItem();
        menuParar = new javax.swing.JMenuItem();
        menuCotas = new javax.swing.JMenu();
        menuCotaCalcular = new javax.swing.JMenuItem();
        menuCotaParar = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        jMenu2.setText("File");
        jMenuBar2.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("File");
        jMenuBar3.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("jMenu6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Metaheuristicas y Optimizacion de Redes");
        setFocusableWindowState(false);
        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setMinimumSize(new java.awt.Dimension(700, 700));

        mapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapaLayout = new javax.swing.GroupLayout(mapa);
        mapa.setLayout(mapaLayout);
        mapaLayout.setHorizontalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 788, Short.MAX_VALUE)
        );
        mapaLayout.setVerticalGroup(
            mapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 536, Short.MAX_VALUE)
        );

        lblEstado.setText(".");

        javax.swing.GroupLayout barraEstadoLayout = new javax.swing.GroupLayout(barraEstado);
        barraEstado.setLayout(barraEstadoLayout);
        barraEstadoLayout.setHorizontalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEstado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barraEstadoLayout.setVerticalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraEstadoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblEstado))
        );

        menuPintar.setText("Datos");

        menuCargarNodos.setText("Cargar nodos");
        menuCargarNodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarNodosActionPerformed(evt);
            }
        });
        menuPintar.add(menuCargarNodos);

        menuCargarAristas.setText("Cargar aristas");
        menuCargarAristas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarAristasActionPerformed(evt);
            }
        });
        menuPintar.add(menuCargarAristas);
        menuPintar.add(jSeparator2);

        menuCargarProp.setText("Cargar prop");
        menuCargarProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarPropActionPerformed(evt);
            }
        });
        menuPintar.add(menuCargarProp);

        menuGuardar.setText("Guardar Individuo");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuPintar.add(menuGuardar);

        jMenuBar1.add(menuPintar);

        jMenu1.setText("Algoritmo");

        menuParte1.setText("Parte1");
        menuParte1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuParte1ActionPerformed(evt);
            }
        });
        jMenu1.add(menuParte1);

        menuParte2.setText("Parte2");
        menuParte2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuParte2ActionPerformed(evt);
            }
        });
        jMenu1.add(menuParte2);
        jMenu1.add(jSeparator1);

        menuGenetico.setText("Genetico");
        menuGenetico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGeneticoActionPerformed(evt);
            }
        });
        jMenu1.add(menuGenetico);

        menuLimpiar.setText("LimpiarMemoria");
        menuLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLimpiarActionPerformed(evt);
            }
        });
        jMenu1.add(menuLimpiar);

        menuParar.setText("Abortar");
        menuParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPararActionPerformed(evt);
            }
        });
        jMenu1.add(menuParar);

        jMenuBar1.add(jMenu1);

        menuCotas.setText("Cotas");

        menuCotaCalcular.setText("Calcular");
        menuCotaCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCotaCalcularActionPerformed(evt);
            }
        });
        menuCotas.add(menuCotaCalcular);

        menuCotaParar.setText("Detener");
        menuCotaParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCotaPararActionPerformed(evt);
            }
        });
        menuCotas.add(menuCotaParar);

        jMenuBar1.add(menuCotas);

        menuHelp.setText("Ayuda");

        menuAbout.setText("Acerca de...");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCargarNodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarNodosActionPerformed
        final JFileChooser fc = new JFileChooser();

        fc.setCurrentDirectory(new File(rutaDatos));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File nodosFile = fc.getSelectedFile();
            rutaDatos = nodosFile.getParentFile().getAbsolutePath();

            try (Stream<String> stream = Files.lines(nodosFile.toPath())) {
                ProblemaControlador problema = ProblemaControlador.getInstance();
                problema.limpiar();
                stream.map(Nodo::new).forEach(problema::addNodo);
                mostrarMensajeInfo("Procesados " + problema.cantNodos() + " nodos.", "Cargado");
                dibujarNodos();
            } catch (Exception ex) {
                mostrarMensajeError(ex);
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuCargarNodosActionPerformed

    private void menuCargarAristasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarAristasActionPerformed
        final JFileChooser fc = new JFileChooser();

        fc.setCurrentDirectory(new File(rutaDatos));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File aristasFile = fc.getSelectedFile();
            rutaDatos = aristasFile.getParentFile().getAbsolutePath();

            try (Stream<String> stream = Files.lines(aristasFile.toPath())) {
                ProblemaControlador problema = ProblemaControlador.getInstance();
                problema.limpiarAristas();

                stream.map(Arista::new).forEach(problema::addArista);
                mostrarMensajeInfo("Procesados " + problema.cantAristas() + " aristas.", "Cargado");

                dibujarAristas();
            } catch (Exception ex) {
                mostrarMensajeError(ex);
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuCargarAristasActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        //easter egg, llamo a este metodo con un breakpoint en el para ver el estado del controller
        ProblemaControlador.getInstance().check();
        mostrarMensajeInfo("Obligatorio 2017 - Metaheuristica y Optimizacion de Redes.\nGerman Faller\nOctavio PK", "Acerca de...");

        

    }//GEN-LAST:event_menuAboutActionPerformed

    private void mapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapaMouseClicked
        clearAristas();
        dibujarAristas();
        dibujarBest();
    }//GEN-LAST:event_mapaMouseClicked

    private void menuParte1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuParte1ActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            List<Arista> parte1Result = Parte1.run();
            dibujarAristas(parte1Result, Color.MAGENTA, 2);
        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }
    }//GEN-LAST:event_menuParte1ActionPerformed

    private void menuCargarPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarPropActionPerformed
        final JFileChooser fc = new JFileChooser();

        if (rutaProp == null) {
            rutaProp = PropiedadesEnum.PROPERTIES.getValorDefecto();
        }
        fc.setCurrentDirectory(new File(rutaProp));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {

                File propFile = fc.getSelectedFile();
                rutaProp = propFile.getAbsolutePath();
                PropiedadesControlador.load(new File(rutaProp));

            } catch (Exception ex) {
                mostrarMensajeError(ex);
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuCargarPropActionPerformed

    private void menuGeneticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGeneticoActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            (new Thread(() -> {
                try {
                    Individuo individuo = AEControlador.getInstance().run();
                    System.out.println("Costo encontrado " + individuo.getCosto());
                    List<Arista> aristas = individuo.getAristas();
                    dibujarAristas();
                    dibujarAristas(aristas, Color.MAGENTA, 2);
                    String tiempo = AEControlador.getInstance().getTime();
                    int gen = AEControlador.getInstance().getGeneracion();

                    lblEstado.setText("Generacion: " + gen + " | Costo Individuo: " + individuo.getCosto() + " | Tiempo: " + tiempo);

                } catch (Exception e) {
                    mostrarMensajeError(e);
                }

            })).start();

            (new Thread(() -> {
                try {
                    Thread.sleep(5000);
                    int gen = 0;
                    while (AEControlador.getInstance().isRunning()) {
                        Individuo individuoAE = AEControlador.getInstance().getBest();
                        while (individuoAE == null) {
                            Thread.sleep(200);
                            individuoAE = AEControlador.getInstance().getBest();
                        }

                        String tiempo = AEControlador.getInstance().getTime();
                        gen = AEControlador.getInstance().getGeneracion();

                        List<Arista> aristas = individuoAE.getAristas();
                        dibujarAristas();
                        dibujarAristas(aristas, Color.MAGENTA, 2);
                        lblEstado.setText("Generacion: " + gen + " | Costo Individuo: " + individuoAE.getCosto() + " | Tiempo: " + tiempo);
                        Thread.sleep(900);

                    }
                } catch (InterruptedException ex) {
                    Logger.error(null, ex);
                }
            })).start();

        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }
    }//GEN-LAST:event_menuGeneticoActionPerformed

    private void menuPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPararActionPerformed
        AEControlador.getInstance().forceStop();
    }//GEN-LAST:event_menuPararActionPerformed

    private void menuLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLimpiarActionPerformed
        AEControlador.getInstance().init();
    }//GEN-LAST:event_menuLimpiarActionPerformed

    private void menuParte2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuParte2ActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            individuo = Parte2.run();
            clearAristas();
            dibujarAristas();
            dibujarAristas(individuo, Color.MAGENTA, 2);
        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }
    }//GEN-LAST:event_menuParte2ActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        if (individuo != null) {
            Path path = Paths.get("individuo.txt");
            try (BufferedWriter writer = Files.newBufferedWriter(path)) {
                for (Arista arista : individuo) {
                    writer.write(arista.getIdNodoA() + "\t");
                    writer.write(arista.getIdNodoB() + "\t");
                    writer.write(arista.getCosto() + "\t");
                    writer.write(arista.getDelay() + "\n");
                }
            } catch (IOException ex) {
                Logger.error(null, ex);
            }
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuCotaCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCotaCalcularActionPerformed
        try {
            if (rutaProp != null) {
                PropiedadesControlador.load(new File(rutaProp));
            }

            (new Thread(() -> {
                try {
                    CotasControlador.getInstance().run();
                } catch (Exception e) {
                    mostrarMensajeError(e);
                }
            })).start();

            (new Thread(() -> {
                try {
                    Thread.sleep(5000);
                    int iter = 0;
                    while (CotasControlador.getInstance().isRunning()) {

                        Individuo individuoCota = CotasControlador.getInstance().getIndividuo();
                        while (individuoCota == null) {
                            Thread.sleep(200);
                            individuoCota = CotasControlador.getInstance().getIndividuo();
                        }

                        String tiempo = CotasControlador.getInstance().getTime();
                        iter = CotasControlador.getInstance().getIteracion();

                        List<Arista> aristas = individuoCota.getAristas();
                        clearAristas();
                        dibujarAristas();
                        dibujarAristas(aristas, Color.MAGENTA, 2);
                        lblEstado.setText("Iteracion: " + iter + " | Costo Individuo: " + individuoCota.getCosto() + " | Tiempo: " + tiempo);

                        Thread.sleep(900);

                    }
                } catch (InterruptedException ex) {
                    Logger.error(null, ex);
                }
            })).start();

        } catch (Exception ex) {
            mostrarMensajeError(ex);
            Logger.error(null, ex);
        }

    }//GEN-LAST:event_menuCotaCalcularActionPerformed

    private void menuCotaPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCotaPararActionPerformed
        CotasControlador.getInstance().forceStop();
    }//GEN-LAST:event_menuCotaPararActionPerformed

    private void dibujarNodos() {
        Boolean debug = PropiedadesControlador.getBoolProperty(PropiedadesEnum.DEBUG);

        Graphics g = mapa.getGraphics();
        ProblemaControlador controlador = ProblemaControlador.getInstance();

        double propY = ((double) mapa.getSize().getHeight() - 10) / controlador.getHeight();
        double propX = ((double) mapa.getSize().getWidth() - 10) / controlador.getWidth();

        final Integer cantFuente = PropiedadesControlador.getIntProperty(PropiedadesEnum.CANT_FUENTES);
        final Integer cantSum = PropiedadesControlador.getIntProperty(PropiedadesEnum.CANT_SUMIDEROS);

        List<Nodo> nodos = ProblemaControlador.getInstance().getNodos();
        nodos.forEach((nodo) -> {
            if (nodo.getNombre() <= cantSum) {
                g.setColor(Color.BLUE);
            } else {
                if (nodo.getNombre() <= (cantSum + cantFuente)) {
                    g.setColor(Color.RED);
                } else {
                    g.setColor(Color.YELLOW);
                }
            }
            final int x = ((int) (nodo.getCoordX() * propX)) + 5;
            final int y = (int) mapa.getSize().getHeight() - (((int) (nodo.getCoordY() * propY))) - 5;

            g.drawOval(x - 3, y - 3, 7, 7);
            g.fillOval(x - 3, y - 3, 7, 7);

            if (debug) {
                g.drawString(nodo.getNombre() + "", x, y);
            }
        });

        mapa.paintComponents(g);

    }

    private void clearAristas() {
        List<Arista> aristas = ProblemaControlador.getInstance().getAristas();
        dibujarAristas(aristas, null, 10);
    }

    private void dibujarAristas() {
        List<Arista> aristas = ProblemaControlador.getInstance().getAristas();
        dibujarAristas(aristas, Color.DARK_GRAY, 1);
    }

    private void dibujarBest() {
        lblEstado.setText("");
        Individuo best = AEControlador.getInstance().getBest();
        if (best != null) {
            List<Arista> ariBest = best.getAristas();
            dibujarAristas(ariBest, Color.MAGENTA, 2);

            String tiempo = AEControlador.getInstance().getTime();
            int gen = AEControlador.getInstance().getGeneracion();
            lblEstado.setText("Generacion: " + gen + " | Costo Individuo: " + best.getCosto() + " | Tiempo: " + tiempo);
        }
    }

    private void dibujarAristas(List<Arista> aristas, Color color, int px) {
        Boolean debug = PropiedadesControlador.getBoolProperty(PropiedadesEnum.DEBUG);

        Graphics g = mapa.getGraphics();
        if (color == null) {
            color = mapa.getBackground();
        }

        ProblemaControlador controlador = ProblemaControlador.getInstance();

        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(px));

        double propY = ((double) mapa.getSize().getHeight() - 10) / controlador.getHeight();
        double propX = ((double) mapa.getSize().getWidth() - 10) / controlador.getWidth();

        g.setColor(color);
        aristas.forEach((a) -> {
            final int x1 = ((int) (a.getNodoA().getCoordX() * propX)) + 5;
            final int y1 = (int) mapa.getSize().getHeight() - (((int) (a.getNodoA().getCoordY() * propY))) - 5;

            final int x2 = ((int) (a.getNodoB().getCoordX() * propX)) + 5;
            final int y2 = (int) mapa.getSize().getHeight() - (((int) (a.getNodoB().getCoordY() * propY))) - 5;

            g2.draw(new Line2D.Float(x1, y1, x2, y2));
            if (debug) {
                g.drawString(a.getId() + "", (x1 + x2) / 2, (y1 + y2) / 2);
            }
        });

        mapa.paintComponents(g);
        dibujarNodos();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barraEstado;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JPanel mapa;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuCargarAristas;
    private javax.swing.JMenuItem menuCargarNodos;
    private javax.swing.JMenuItem menuCargarProp;
    private javax.swing.JMenuItem menuCotaCalcular;
    private javax.swing.JMenuItem menuCotaParar;
    private javax.swing.JMenu menuCotas;
    private javax.swing.JMenuItem menuGenetico;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuLimpiar;
    private javax.swing.JMenuItem menuParar;
    private javax.swing.JMenuItem menuParte1;
    private javax.swing.JMenuItem menuParte2;
    private javax.swing.JMenu menuPintar;
    // End of variables declaration//GEN-END:variables
}
