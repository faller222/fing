
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Mon Jun 16 14:25:19 UYT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10j generated parser.
  * @version Mon Jun 16 14:25:19 UYT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\006\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\011\010\000\002" +
    "\015\003\000\002\015\005\000\002\014\004\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\012\011" +
    "\000\002\013\012\000\002\017\005\000\002\017\003\000" +
    "\002\010\003\000\002\010\003\000\002\020\005\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\006\000\002\026\010\000\002\027\007\000\002" +
    "\027\005\000\002\030\014\000\002\031\005\000\002\032" +
    "\007\000\002\033\011\000\002\034\003\000\002\034\005" +
    "\000\002\035\003\000\002\035\003\000\002\036\006\000" +
    "\002\037\010\000\002\040\003\000\002\040\003\000\002" +
    "\041\005\000\002\041\003\000\002\042\006\000\002\043" +
    "\003\000\002\043\005\000\002\044\003\000\002\044\005" +
    "\000\002\045\003\000\002\045\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\006\000\002\050\003\000\002\050\004\000\002\051" +
    "\003\000\002\051\005\000\002\052\003\000\002\052\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\005\000\002\054\003\000\002" +
    "\054\005\000\002\055\006\000\002\055\005\000\002\056" +
    "\006\000\002\057\010\000\002\057\007\000\002\060\003" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\062\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\016\004\022\011\027\012\007\015\024\017" +
    "\033\022\034\001\002\000\004\047\ufffb\001\002\000\006" +
    "\047\uffd3\052\uffd3\001\002\000\004\047\uffe6\001\002\000" +
    "\012\040\247\053\147\054\054\055\052\001\002\000\020" +
    "\002\uffff\004\022\011\027\012\007\015\024\017\033\022" +
    "\034\001\002\000\004\047\ufff9\001\002\000\004\047\ufffc" +
    "\001\002\000\004\047\ufff8\001\002\000\004\047\ufffa\001" +
    "\002\000\004\047\uffe2\001\002\000\004\047\uffdf\001\002" +
    "\000\004\047\uffeb\001\002\000\004\047\uffe4\001\002\000" +
    "\004\047\uffe3\001\002\000\006\005\216\007\217\001\002" +
    "\000\006\047\uffd4\052\uffd4\001\002\000\004\016\200\001" +
    "\002\000\004\047\uffe0\001\002\000\004\047\ufff7\001\002" +
    "\000\006\005\174\007\175\001\002\000\004\047\ufffd\001" +
    "\002\000\004\047\uffe1\001\002\000\004\047\uffea\001\002" +
    "\000\004\053\126\001\002\000\004\013\043\001\002\000" +
    "\004\047\uffe7\001\002\000\004\047\uffe5\001\002\000\004" +
    "\047\042\001\002\000\004\002\041\001\002\000\004\002" +
    "\000\001\002\000\020\002\ufffe\004\ufffe\011\ufffe\012\ufffe" +
    "\015\ufffe\017\ufffe\022\ufffe\001\002\000\004\053\044\001" +
    "\002\000\006\014\045\047\uffd9\001\002\000\016\021\056" +
    "\024\064\051\063\053\061\054\054\055\052\001\002\000" +
    "\012\025\uffb9\030\uffb9\047\uffb9\052\uffb9\001\002\000\012" +
    "\025\uffb8\030\uffb8\047\uffb8\052\uffb8\001\002\000\004\047" +
    "\uffd8\001\002\000\012\025\uffb7\030\uffb7\047\uffb7\052\uffb7" +
    "\001\002\000\052\013\uffa5\014\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\052\uffa5\001\002\000\012\025\070\030\uffbe" +
    "\047\uffbe\052\uffbe\001\002\000\052\013\uffa6\014\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\001\002\000\012" +
    "\025\uffba\030\uffba\047\uffba\052\uffba\001\002\000\004\051" +
    "\123\001\002\000\034\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\052\uffad\001\002\000\012\025\uffbc\030\uffbc" +
    "\047\uffbc\052\uffbc\001\002\000\034\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\052\uffae\001\002\000\034\024" +
    "\105\025\uffb5\026\101\027\106\030\uffb5\041\076\042\102" +
    "\043\075\044\100\045\104\046\103\047\uffb5\052\uffb5\001" +
    "\002\000\016\021\056\024\064\051\063\053\061\054\054" +
    "\055\052\001\002\000\014\021\056\051\063\053\061\054" +
    "\054\055\052\001\002\000\010\030\066\047\uffc0\052\uffc0" +
    "\001\002\000\014\021\056\051\063\053\061\054\054\055" +
    "\052\001\002\000\012\025\070\030\uffbd\047\uffbd\052\uffbd" +
    "\001\002\000\014\021\056\051\063\053\061\054\054\055" +
    "\052\001\002\000\012\025\uffbb\030\uffbb\047\uffbb\052\uffbb" +
    "\001\002\000\010\030\066\047\uffbf\052\uffbf\001\002\000" +
    "\004\052\074\001\002\000\012\025\uffb6\030\uffb6\047\uffb6" +
    "\052\uffb6\001\002\000\010\053\uffa8\054\uffa8\055\uffa8\001" +
    "\002\000\010\053\uffab\054\uffab\055\uffab\001\002\000\010" +
    "\053\061\054\054\055\052\001\002\000\010\053\uffa7\054" +
    "\uffa7\055\uffa7\001\002\000\010\053\061\054\054\055\052" +
    "\001\002\000\010\053\uffaa\054\uffaa\055\uffaa\001\002\000" +
    "\010\053\uffac\054\uffac\055\uffac\001\002\000\010\053\uffa9" +
    "\054\uffa9\055\uffa9\001\002\000\004\026\112\001\002\000" +
    "\006\024\107\031\110\001\002\000\004\031\111\001\002" +
    "\000\012\025\uffb2\030\uffb2\047\uffb2\052\uffb2\001\002\000" +
    "\012\025\uffb3\030\uffb3\047\uffb3\052\uffb3\001\002\000\010" +
    "\053\061\054\054\055\052\001\002\000\004\025\114\001" +
    "\002\000\010\053\061\054\054\055\052\001\002\000\012" +
    "\025\uffb0\030\uffb0\047\uffb0\052\uffb0\001\002\000\004\025" +
    "\117\001\002\000\010\053\061\054\054\055\052\001\002" +
    "\000\012\025\uffaf\030\uffaf\047\uffaf\052\uffaf\001\002\000" +
    "\012\025\uffb4\030\uffb4\047\uffb4\052\uffb4\001\002\000\026" +
    "\025\uffb5\030\uffb5\041\076\042\102\043\075\044\100\045" +
    "\104\046\103\047\uffb5\052\uffb5\001\002\000\004\012\007" +
    "\001\002\000\004\052\125\001\002\000\012\025\uffb1\030" +
    "\uffb1\047\uffb1\052\uffb1\001\002\000\004\020\127\001\002" +
    "\000\006\051\132\053\130\001\002\000\004\046\146\001" +
    "\002\000\006\014\144\047\uffde\001\002\000\004\053\133" +
    "\001\002\000\012\014\uffec\047\uffec\050\142\052\uffec\001" +
    "\002\000\004\052\135\001\002\000\004\046\136\001\002" +
    "\000\004\051\137\001\002\000\004\012\007\001\002\000" +
    "\004\052\141\001\002\000\004\047\uffda\001\002\000\004" +
    "\053\133\001\002\000\010\014\uffed\047\uffed\052\uffed\001" +
    "\002\000\016\021\056\024\064\051\063\053\061\054\054" +
    "\055\052\001\002\000\004\047\uffdd\001\002\000\010\053" +
    "\147\054\054\055\052\001\002\000\026\013\uffc2\014\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\047\uffc2\050\uffc2\051" +
    "\166\052\uffc2\001\002\000\024\013\uffc9\014\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\047\uffc9\050\uffc9\052\uffc9\001" +
    "\002\000\024\013\uffcb\014\uffcb\035\uffcb\036\uffcb\037\162" +
    "\040\161\047\uffcb\050\uffcb\052\uffcb\001\002\000\024\013" +
    "\uffc3\014\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\047\uffc3" +
    "\050\uffc3\052\uffc3\001\002\000\014\014\uffdb\035\155\036" +
    "\157\047\uffdb\050\154\001\002\000\004\053\130\001\002" +
    "\000\010\053\uffc7\054\uffc7\055\uffc7\001\002\000\010\053" +
    "\147\054\054\055\052\001\002\000\010\053\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\024\013\uffca\014\uffca\035\uffca\036" +
    "\uffca\037\162\040\161\047\uffca\050\uffca\052\uffca\001\002" +
    "\000\010\053\uffc5\054\uffc5\055\uffc5\001\002\000\010\053" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\010\053\147\054\054" +
    "\055\052\001\002\000\024\013\uffc8\014\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\047\uffc8\050\uffc8\052\uffc8\001\002" +
    "\000\006\014\uffdc\047\uffdc\001\002\000\010\053\147\054" +
    "\054\055\052\001\002\000\004\052\173\001\002\000\014" +
    "\013\uffcd\035\155\036\157\050\171\052\uffcd\001\002\000" +
    "\010\053\147\054\054\055\052\001\002\000\006\013\uffce" +
    "\052\uffce\001\002\000\024\013\uffc1\014\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\047\uffc1\050\uffc1\052\uffc1\001\002" +
    "\000\004\053\177\001\002\000\004\053\176\001\002\000" +
    "\004\047\uffe9\001\002\000\004\047\uffe8\001\002\000\004" +
    "\053\201\001\002\000\004\051\202\001\002\000\004\053" +
    "\133\001\002\000\004\052\204\001\002\000\006\023\205" +
    "\051\206\001\002\000\004\051\213\001\002\000\004\012" +
    "\007\001\002\000\004\047\uffd6\001\002\000\004\047\uffd7" +
    "\001\002\000\004\052\212\001\002\000\004\047\uffd5\001" +
    "\002\000\010\053\147\054\054\055\052\001\002\000\004" +
    "\052\215\001\002\000\004\047\uffcc\001\002\000\004\053" +
    "\240\001\002\000\004\053\220\001\002\000\006\010\221" +
    "\051\222\001\002\000\004\051\235\001\002\000\004\053" +
    "\223\001\002\000\010\032\234\033\231\034\232\001\002" +
    "\000\004\052\230\001\002\000\006\050\226\052\ufff5\001" +
    "\002\000\004\053\223\001\002\000\004\052\ufff4\001\002" +
    "\000\004\047\ufff6\001\002\000\006\050\ufff2\052\ufff2\001" +
    "\002\000\006\050\ufff0\052\ufff0\001\002\000\006\050\ufff3" +
    "\052\ufff3\001\002\000\006\050\ufff1\052\ufff1\001\002\000" +
    "\004\012\007\001\002\000\004\052\237\001\002\000\004" +
    "\047\uffef\001\002\000\004\006\241\001\002\000\004\053" +
    "\242\001\002\000\004\051\243\001\002\000\004\053\133" +
    "\001\002\000\004\052\245\001\002\000\004\047\uffee\001" +
    "\002\000\004\002\001\001\002\000\004\013\uffcf\001\002" +
    "\000\004\013\252\001\002\000\004\013\uffd0\001\002\000" +
    "\004\053\133\001\002\000\010\014\254\047\uffd2\052\uffd2" +
    "\001\002\000\016\021\056\024\064\051\063\053\061\054" +
    "\054\055\052\001\002\000\006\047\uffd1\052\uffd1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\060\003\037\004\036\005\027\006\007\007" +
    "\003\010\013\011\010\012\012\013\025\020\016\021\031" +
    "\022\011\023\034\024\035\025\030\026\024\030\015\031" +
    "\017\032\020\033\014\035\005\036\022\037\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\247\041\250\043\167\044\150\047\147\062\151" +
    "\001\001\000\060\003\245\004\036\005\027\006\007\007" +
    "\003\010\013\011\010\012\012\013\025\020\016\021\031" +
    "\022\011\023\034\024\035\025\030\026\024\030\015\031" +
    "\017\032\020\033\014\035\005\036\022\037\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\050\047\051" +
    "\064\052\052\053\057\054\054\055\045\056\046\057\050" +
    "\060\061\062\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\076\001\001\000\026\050\072\051" +
    "\064\052\052\053\057\054\054\055\045\056\046\057\050" +
    "\060\061\062\056\001\001\000\024\051\071\052\052\053" +
    "\057\054\054\055\045\056\046\057\050\060\061\062\056" +
    "\001\001\000\002\001\001\000\022\052\066\053\057\054" +
    "\054\055\045\056\046\057\050\060\061\062\056\001\001" +
    "\000\002\001\001\000\020\053\070\054\054\055\045\056" +
    "\046\057\050\060\061\062\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\054\120\060\121" +
    "\062\056\001\001\000\002\001\001\000\006\060\115\062" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\060\112" +
    "\062\056\001\001\000\002\001\001\000\006\060\114\062" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\060\117\062\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\076\001\001\000\010\035\123\036\022" +
    "\037\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\137\036\022\037\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\142\001\001\000\002" +
    "\001\001\000\026\050\144\051\064\052\052\053\057\054" +
    "\054\055\045\056\046\057\050\060\061\062\056\001\001" +
    "\000\002\001\001\000\012\043\152\044\150\047\147\062" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\162\001\001\000\002\001\001\000\004\045\155\001" +
    "\001\000\004\027\164\001\001\000\002\001\001\000\010" +
    "\044\157\047\147\062\151\001\001\000\002\001\001\000" +
    "\004\046\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\163\062\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\041\166\043\167\044\150\047\147" +
    "\062\151\001\001\000\002\001\001\000\004\045\155\001" +
    "\001\000\014\041\171\043\167\044\150\047\147\062\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\202\001" +
    "\001\000\002\001\001\000\006\034\207\042\206\001\001" +
    "\000\002\001\001\000\010\035\210\036\022\037\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\041\213\043\167\044\150\047" +
    "\147\062\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\224\015\223\001\001\000\004" +
    "\016\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\224\015\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\035\235\036\022\037\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\252\001\001\000\002\001\001\000\026\050" +
    "\254\051\064\052\052\053\057\054\054\055\045\056\046" +
    "\057\050\060\061\062\056\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // constant ::= NUMBER 
            {
              Object RESULT = null;
		  
						 System.out.println("CONSTANTE NUMERO");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(48/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // constant ::= STRING 
            {
              Object RESULT = null;
		  
						 System.out.println("CONSTANTE CADENA DE CARACTERES");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(48/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // compare_operator ::= MAYORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // compare_operator ::= MENORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // compare_operator ::= DISTINTO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // compare_operator ::= MAYOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // compare_operator ::= MENOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // compare_operator ::= IGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*compare_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_expression ::= constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expression ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_exp_between ::= simple_expression BETWEEN simple_expression AND simple_expression 
            {
              Object RESULT = null;
		  
							System.out.println("ENTRE");					
						
              CUP$parser$result = new java_cup.runtime.Symbol(45/*simple_exp_between*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_exp_between ::= simple_expression NOT BETWEEN simple_expression AND simple_expression 
            {
              Object RESULT = null;
		  
							System.out.println("NO ENTRE");					
						
              CUP$parser$result = new java_cup.runtime.Symbol(45/*simple_exp_between*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exists_exp ::= EXISTS CURIZQ select_stm CURDER 
            {
              Object RESULT = null;
		  
							System.out.println("EXISTE");					
						
              CUP$parser$result = new java_cup.runtime.Symbol(44/*exists_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_exp_null ::= simple_expression IS NULL 
            {
              Object RESULT = null;
		  
							System.out.println("ES NULL");					
						
              CUP$parser$result = new java_cup.runtime.Symbol(43/*simple_exp_null*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_exp_null ::= simple_expression IS NOT NULL 
            {
              Object RESULT = null;
		  
							System.out.println("NO ES NULL");					
						
              CUP$parser$result = new java_cup.runtime.Symbol(43/*simple_exp_null*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // complex_expression ::= simple_expression compare_operator complex_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*complex_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // complex_expression ::= simple_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*complex_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logic_factor ::= CURIZQ condition CURDER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*logic_factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logic_factor ::= simple_exp_between 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*logic_factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logic_factor ::= exists_exp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*logic_factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logic_factor ::= simple_exp_null 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*logic_factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logic_factor ::= complex_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*logic_factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logic_term ::= logic_term AND logic_factor 
            {
              Object RESULT = null;
		  
						System.out.println("AND");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(40/*logic_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logic_term ::= logic_factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*logic_term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logic_exp ::= logic_exp OR logic_term 
            {
              Object RESULT = null;
		  
						System.out.println("OR");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*logic_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logic_exp ::= logic_term 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*logic_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition ::= NOT logic_exp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition ::= logic_exp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= ID CURIZQ exp_set CURDER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= ID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_mul ::= BARRA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*operador_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_mul ::= ASTERISCO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*operador_mul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op_adi ::= MENOS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*op_adi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_adi ::= MAS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*op_adi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term operador_mul factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression op_adi term 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= term 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value_list ::= VALUES CURIZQ exp_set CURDER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*value_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_set ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*exp_set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_set ::= expression COMA exp_set 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*exp_set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // select_stm_all ::= ASTERISCO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*select_stm_all*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // select_stm_all ::= exp_set 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*select_stm_all*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // select_stm_where ::= SELECT select_stm_all FROM param_st WHERE condition 
            {
              Object RESULT = null;
		  
						System.out.println("SELECCION DE FILAS CONDICIONAL");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(29/*select_stm_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // select_stm_simple ::= SELECT select_stm_all FROM param_st 
            {
              Object RESULT = null;
		  
						System.out.println("SELECCION DE FILAS");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(28/*select_stm_simple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select_stm ::= select_stm_where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*select_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // select_stm ::= select_stm_simple 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*select_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // insert_stm_next ::= CURIZQ select_stm CURDER 
            {
              Object RESULT = null;
		  
						System.out.println("INSERCION DE FILAS CON SELECT");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*insert_stm_next*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // insert_stm_next ::= value_list 
            {
              Object RESULT = null;
		  
						System.out.println("INSERCION DE FILA");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*insert_stm_next*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insert_stm ::= INSERT INTO ID CURIZQ param_st CURDER insert_stm_next 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*insert_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // delete_stm_where ::= DELETE FROM ID WHERE condition 
            {
              Object RESULT = null;
		  
						System.out.println("ELIMINACION DE FILAS CONDICIONAL");
					
              CUP$parser$result = new java_cup.runtime.Symbol(24/*delete_stm_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // delete_stm ::= DELETE FROM ID 
            {
              Object RESULT = null;
		  
						System.out.println("ELIMINACION DE FILAS");
					
              CUP$parser$result = new java_cup.runtime.Symbol(23/*delete_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // update_subquery ::= UPDATE ID SET CURIZQ param_st CURDER IGUAL CURIZQ select_stm CURDER 
            {
              Object RESULT = null;
		  
						System.out.println("ACTUALIZACION CON SELECT");
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*update_subquery*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_comp_set ::= ID IGUAL expression 
            {
              Object RESULT = null;
		  
						System.out.println("LISTA DE ( ID = EXPRESSION )");
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp_comp_set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_comp_set ::= ID IGUAL expression COMA exp_comp_set 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*exp_comp_set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // update_simple_where ::= UPDATE ID SET exp_comp_set WHERE condition 
            {
              Object RESULT = null;
		  
						System.out.println("ACTUALIZACION SIMPLE CONDICIONAL");
					
              CUP$parser$result = new java_cup.runtime.Symbol(20/*update_simple_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // update_simple ::= UPDATE ID SET exp_comp_set 
            {
              Object RESULT = null;
		  
						System.out.println("ACTUALIZACION SIMPLE");
					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*update_simple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // update_stm ::= update_subquery 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*update_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // update_stm ::= update_simple_where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*update_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // update_stm ::= update_simple 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*update_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data_change_stm ::= insert_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*data_change_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_change_stm ::= delete_stm_where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*data_change_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_change_stm ::= delete_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*data_change_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // data_change_stm ::= update_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*data_change_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // data_stm ::= select_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*data_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_stm ::= data_change_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*data_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // drop_index ::= DROP INDEX ID 
            {
              Object RESULT = null;
		  
						System.out.println("ELIMINACION DE INDICE");
					
              CUP$parser$result = new java_cup.runtime.Symbol(15/*drop_index*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // drop_table ::= DROP TABLE ID 
            {
              Object RESULT = null;
		  
						System.out.println("ELIMINACION DE TABLA");
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*drop_table*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // drop_stm ::= drop_index 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*drop_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // drop_stm ::= drop_table 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*drop_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_st ::= ID 
            {
              Object RESULT = null;
		  
						 System.out.println("LISTA DE IDENTIFICADORES");					
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*param_st*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_st ::= ID COMA param_st 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*param_st*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // create_index ::= CREATE INDEX ID ON ID CURIZQ param_st CURDER 
            {
              Object RESULT = null;
		
						System.out.println("CREACION DE INDICE");
					
              CUP$parser$result = new java_cup.runtime.Symbol(9/*create_index*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // create_table_as ::= CREATE TABLE ID AS CURIZQ select_stm CURDER 
            {
              Object RESULT = null;
		
						System.out.println("CREACION DE TABLA CON SELECT");
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*create_table_as*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_type ::= DATE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*data_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // data_type ::= VARCHAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*data_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // data_type ::= INTEGER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*data_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_param ::= ID data_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*decl_param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl_parametros ::= decl_param COMA decl_parametros 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_parametros ::= decl_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // create_table ::= CREATE TABLE ID CURIZQ decl_parametros CURDER 
            {
              Object RESULT = null;
		
						System.out.println("CREACION DE TABLA");
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*create_table*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // create_stm ::= create_index 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*create_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // create_stm ::= create_table_as 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*create_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // create_stm ::= create_table 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*create_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // schema_stm ::= drop_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*schema_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // schema_stm ::= create_stm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*schema_stm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql_statement ::= data_stm 
            {
              Object RESULT = null;
		
						System.out.println("DECLARACION DE DATOS");
						
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql_statement ::= schema_stm 
            {
              Object RESULT = null;
		
						System.out.println("DECLARACION DE ESQUEMA");
						
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_aux ::= sql_statement PUNTOYCOMA 
            {
              Object RESULT = null;
		
						System.out.println("---");
					
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sql_aux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_program ::= sql_aux 
            {
              Object RESULT = null;
		
						System.out.println("OK");
					
              CUP$parser$result = new java_cup.runtime.Symbol(1/*sql_program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql_program ::= sql_aux sql_program 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*sql_program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

